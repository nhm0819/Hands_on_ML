{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"California","provenance":[{"file_id":"15qJk5eRFVzfH9ZLXrscQ1glXIFYXCrgE","timestamp":1616735148735}],"collapsed_sections":[],"toc_visible":true,"mount_file_id":"15qJk5eRFVzfH9ZLXrscQ1glXIFYXCrgE","authorship_tag":"ABX9TyP98Ixcu3dzBzhN1+CpYuu8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"TomYhCnbZvUi"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"C39WWNJwwuGr"},"source":["# python ≥3.5 \n","import sys\n","assert sys.version_info >= (3, 5)\n","\n","# sklearn ≥0.20\n","import sklearn\n","assert sklearn.__version__ >= \"0.20\"\n","\n","# Common Module import\n","import numpy as np\n","import os\n","\n","# Directory Path Setting\n","BASE_PATH = '/content/drive/MyDrive/pyhong'\n","PROJECT_DIR_NAME = 'Hands_on_ML'\n","PROJECT_ROOT_DIR = os.path.join(BASE_PATH, PROJECT_DIR_NAME)\n","os.makedirs(PROJECT_ROOT_DIR, exist_ok=True)\n","os.chdir(PROJECT_ROOT_DIR)\n","if not os.path.exists(PROJECT_ROOT_DIR):\n","  print('Check your google drive directory. See you file explorer')\n","\n","\n","# Graph Setting\n","%matplotlib inline\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","mpl.rc('axes', labelsize=14)\n","mpl.rc('xtick', labelsize=12)\n","mpl.rc('ytick', labelsize=12)\n","\n","\n","# Graph Path Setting\n","CHAPTER_ID = \"end_to_end_project\"\n","IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID)\n","os.makedirs(IMAGES_PATH, exist_ok=True)\n","\n","def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n","    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n","    print(\"그림 저장:\", fig_id)\n","    if tight_layout:\n","        plt.tight_layout()\n","    plt.savefig(path, format=fig_extension, dpi=resolution)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7rQPAxIem9jA"},"source":["%%writefile test.py\n","print(\"Hello Colab\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QIdgAUsClDoT"},"source":["!git init\n","!git config --global user.email \"nhm9001@gmail.com\"\n","!git config --global user.name \"Hongmin\"\n","!git add .\n","!git commit -m \"first commit\"\n","!git remote add origin https://nhm0819:[password]@github.com/nhm0819/Hands_on_ML.git\n","!git branch -M master\n","!git push -u origin master"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ghfc7F2baXo0"},"source":["import tarfile\n","import urllib\n","\n","DOWNLOAD_ROOT = \"https://raw.githubusercontent.com/rickiepark/handson-ml2/master/\"\n","HOUSING_PATH = os.path.join(PROJECT_ROOT_DIR, \"datasets\", \"housing\")\n","HOUSING_URL = DOWNLOAD_ROOT + \"datasets/housing/housing.tgz\"\n","\n","def fetch_housing_data(housing_url=HOUSING_URL, housing_path=HOUSING_PATH):\n","    if not os.path.isdir(housing_path):\n","        os.makedirs(housing_path)\n","    tgz_path = os.path.join(housing_path, \"housing.tgz\")\n","    urllib.request.urlretrieve(housing_url, tgz_path)\n","    housing_tgz = tarfile.open(tgz_path)\n","    housing_tgz.extractall(path=housing_path)\n","    housing_tgz.close()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZfqZMAjKMjF2"},"source":["fetch_housing_data()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FadafD6JIrmU"},"source":["import pandas as pd\n","\n","def load_housing_data(housing_path = HOUSING_PATH):\n","    csv_path = os.path.join(housing_path, \"housing.csv\")\n","    return pd.read_csv(csv_path)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Exkfg1ewL7Cz"},"source":["housing = load_housing_data()\n","housing.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"w753e8dvNCZK"},"source":["housing.info()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qqaPidUMNClp"},"source":["housing[\"ocean_proximity\"].value_counts()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DpwazTDhQLNZ"},"source":["housing.describe()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lI2C6e8tQNxl"},"source":["housing.hist(bins=50, figsize=(20,15))\n","#plt.show()\n","save_fig(\"attribute_histogram_plots\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wsXSQUuDQcyl"},"source":["# fix random.seed\n","np.random.seed(42)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ghf_LnB5QnPO"},"source":["# split principle..1\n","def split_train_test(data, test_ratio):\n","    shuffled_indices = np.random.permutation(len(data))\n","    test_set_size = int(len(data)*test_ratio)\n","    test_indices = shuffled_indices[:test_set_size]\n","    train_indices = shuffled_indices[test_set_size:]\n","    print(shuffled_indices)\n","    return data.iloc[train_indices], data.iloc[test_indices]\n","\n","split_train_test(housing, 0.2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HRoIhWIHSKmR"},"source":["# split principle..2\n","def split_train_test_by_id(data, test_ratio, id_column):\n","    ids = data[id_column]\n","    in_test_set = ids.apply(lambda id_: test_set_check(id_, test_ratio))\n","    return data.loc[~in_test_set], data.loc[in_test_set]\n","\n","from zlib import crc32\n","def test_set_check(identifier, test_ratio):\n","   return crc32(np.int64(identifier)) & 0xffffffff < test_ratio * 2 ** 32\n","\n","# import hashlib\n","# def test_set_check(identifier, test_ratio, hash=hashlib.md5):\n","#    return hash(np.int64(identifier)).digest()[-1] < 256 * test_ratio\n","\n","# def test_set_check(identifier, test_ratio, hash=hashlib.md5):\n","#     return bytearray(hash(np.int64(identifier)).digest())[-1] < 256 * test_ratio"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0FaL1kgHS9xu"},"source":["housing_with_id = housing.reset_index()   # add `index` column in DF\n","train_set, test_set = split_train_test_by_id(housing_with_id, 0.2, \"index\")\n","test_set.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eP5q4qkSTPpr"},"source":["housing_with_id[\"id\"] = housing[\"longitude\"] * 1000 + housing[\"latitude\"]\n","train_set, test_set = split_train_test_by_id(housing_with_id, 0.2, \"id\")\n","test_set['id']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CGevSOtjWf2F"},"source":["# split with sklearn\n","from sklearn.model_selection import train_test_split\n","\n","train_set, test_set = train_test_split(housing, test_size=0.2, random_state=42)\n","train_set.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lW8dIONaWx1i"},"source":["housing[\"median_income\"].hist()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"g-I5ADdpXEGu"},"source":["housing[\"income_cat\"] = pd.cut(housing[\"median_income\"],\n","                                  bins=[0., 1.5, 3.0, 4.5, 6., np.inf],\n","                                  labels=[1, 2, 3, 4, 5])\n","housing.info()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ifqJ4xJoXlg5"},"source":["housing[\"income_cat\"].value_counts()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_wGyA4bMX0Xj"},"source":["housing[\"income_cat\"].hist()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bmEejOpuYAh6"},"source":["from sklearn.model_selection import StratifiedShuffleSplit\n","\n","split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n","for train_index, test_index in split.split(housing, housing[\"income_cat\"]):\n","    strat_train_set = housing.loc[train_index]\n","    strat_test_set = housing.loc[test_index]\n","\n","strat_test_set[\"income_cat\"].value_counts() / len(strat_test_set)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"APssjyr5Y7OK"},"source":["# compare the ratio\n","housing[\"income_cat\"].value_counts() / len(housing)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jL8VhB_jZGrk"},"source":["# compare proportions\n","def income_cat_proportions(data):\n","    return data[\"income_cat\"].value_counts() / len(data)\n","\n","train_set, test_set = train_test_split(housing, test_size=0.2, random_state=42)\n","\n","compare_props = pd.DataFrame({\n","    \"Overall\": income_cat_proportions(housing),\n","    \"Stratified\": income_cat_proportions(strat_test_set),\n","    \"Random\": income_cat_proportions(test_set),\n","}).sort_index()\n","\n","compare_props[\"Rand. %error\"] = 100 * compare_props[\"Random\"] / compare_props[\"Overall\"] - 100\n","compare_props[\"Strat. %error\"] = 100 * compare_props[\"Stratified\"] / compare_props[\"Overall\"] - 100"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8LNXsgeWaU-4"},"source":["compare_props"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q02xlMslar_d"},"source":["for set_ in (strat_train_set, strat_test_set):\n","    set_.drop(\"income_cat\", axis=1, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"G3UX44bdbC8S"},"source":["strat_train_set.info()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PARIHdUwbPRh"},"source":["housing = strat_train_set.copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"K7ay9xTzbUz-"},"source":["housing.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\")\n","save_fig(\"bad_visualization_plot\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lE7aZt0JbiRb"},"source":["housing.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", alpha=0.1)\n","save_fig(\"better_visualization_plot\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"t6QhyANCbuJn"},"source":["housing.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", alpha=0.4,\n","             s=housing[\"population\"]/100, label=\"population\", figsize=(10,7),\n","             c=\"median_house_value\", cmap=plt.get_cmap(\"jet\"), colorbar=True, sharex=False)\n","plt.legend()\n","save_fig(\"housing_prices_scatterplot\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JkichwFac5jS"},"source":["# Download the California image\n","images_path = os.path.join(PROJECT_ROOT_DIR, \"images\", \"end_to_end_project\")\n","os.makedirs(images_path, exist_ok=True)\n","DOWNLOAD_ROOT = \"https://raw.githubusercontent.com/ageron/handson-ml2/master/\"\n","filename = \"california.png\"\n","print(\"Downloading\", filename)\n","url = DOWNLOAD_ROOT + \"images/end_to_end_project/\" + filename\n","urllib.request.urlretrieve(url, os.path.join(images_path, filename))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cPRUWaD0dTdz"},"source":["import matplotlib.image as mpimg\n","california_img=mpimg.imread(os.path.join(images_path, filename))\n","ax = housing.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", figsize=(10,7),\n","                  s=housing['population']/100, label=\"Population\",\n","                  c=\"median_house_value\", cmap=plt.get_cmap(\"jet\"),\n","                  colorbar=False, alpha=0.4)\n","plt.imshow(california_img, extent=[-124.55, -113.80, 32.45, 42.05], alpha=0.5,\n","           cmap=plt.get_cmap(\"jet\"))\n","plt.ylabel(\"Latitude\", fontsize=14)\n","plt.xlabel(\"Longitude\", fontsize=14)\n","\n","prices = housing[\"median_house_value\"]\n","tick_values = np.linspace(prices.min(), prices.max(), 11)\n","cbar = plt.colorbar(ticks=tick_values/prices.max())\n","cbar.ax.set_yticklabels([\"$%dk\"%(round(v/1000)) for v in tick_values], fontsize=14)\n","cbar.set_label('Median House Value', fontsize=16)\n","\n","plt.legend(fontsize=16)\n","save_fig(\"california_housing_prices_plot\")\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"plw3UZdAeyg6"},"source":["corr_matrix = housing.corr()\n","corr_matrix[\"median_house_value\"].sort_values(ascending=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tmWqlCVHe_sg"},"source":["# from pandas.tools.plotting import scatter_matrix  (old version pandas)\n","from pandas.plotting import scatter_matrix\n","\n","# plotting top 4 corr\n","attributes = [\"median_house_value\", \"median_income\", \"total_rooms\",\n","              \"housing_median_age\"]\n","scatter_matrix(housing[attributes], figsize=(12, 8))\n","save_fig(\"scatter_matrix_plot\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yvmemaQde_1N"},"source":["housing.plot(kind=\"scatter\", x=\"median_income\", y=\"median_house_value\",\n","             alpha=0.1)\n","plt.axis([0, 16, 0, 550000])\n","save_fig(\"income_vs_house_value_scatterplot\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PkUyTk2ifnP4"},"source":["# add combination of attributes\n","housing[\"rooms_per_household\"] = housing[\"total_rooms\"]/housing[\"households\"]\n","housing[\"bedrooms_per_room\"] = housing[\"total_bedrooms\"]/housing[\"total_rooms\"]\n","housing[\"population_per_household\"]=housing[\"population\"]/housing[\"households\"]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"v91v_emSfnZ4"},"source":["corr_matrix = housing.corr()\n","corr_matrix[\"median_house_value\"].sort_values(ascending=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ALXEO15ZgJRT"},"source":["housing.plot(kind=\"scatter\", x=\"rooms_per_household\", y=\"median_house_value\",\n","             alpha=0.2)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VDTZv4LggRtO"},"source":["housing.describe()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LDZMKrMMgR7_"},"source":["housing = strat_train_set.drop(\"median_house_value\", axis=1) # label delete for training\n","housing_labels = strat_train_set[\"median_house_value\"].copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iKkk8fMkgooR"},"source":["# choose isnull() in total_bedrooms\n","sample_incomplete_rows = housing[housing.isnull().any(axis=1)].head()\n","sample_incomplete_rows"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z1UAvkLkhOqd"},"source":["# preprocess the missing values\n","sample_incomplete_rows.dropna(subset=[\"total_bedrooms\"]) # option 1 - delete rows\n","sample_incomplete_rows.drop(\"total_bedrooms\", axis=1) # option 2 - delete column\n","\n","median = housing[\"total_bedrooms\"].median()\n","sample_incomplete_rows[\"total_bedrooms\"].fillna(median, inplace=True) # option 3 - imputation"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IqmHTB67huwC"},"source":["from sklearn.impute import SimpleImputer\n","imputer = SimpleImputer(strategy=\"median\") # mean, most_frequent, constant(fill_value)\n","# to-do : change this to multiple imputation"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8nvDXcELhPB5"},"source":["housing_num = housing.drop(\"ocean_proximity\", axis=1)\n","# housing_num = housing.select_dtypes(include=[np.number])\n","imputer.fit(housing_num)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"p4gzuctEjskU"},"source":["imputer.statistics_"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z1Hh1-_rjvmP"},"source":["housing_num.median().values"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BdtwKoHKjyJ4"},"source":["X = imputer.transform(housing_num)\n","housing_tr = pd.DataFrame(X, columns=housing_num.columns,\n","                          index=housing_num.index)\n","\n","housing_tr.loc[sample_incomplete_rows.index.values]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3gV-t--7kYCl"},"source":["housing_tr.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zpJKiCkkkqoW"},"source":["housing_cat = housing[[\"ocean_proximity\"]]\n","housing_cat.head(10)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zebtlvjgkYkr"},"source":["from sklearn.preprocessing import OrdinalEncoder\n","\n","ordinal_encoder = OrdinalEncoder()\n","housing_cat_encoded = ordinal_encoder.fit_transform(housing_cat)\n","housing_cat_encoded[:10]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s2liP3KDlSGE"},"source":["ordinal_encoder.categories_"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nA0jy4QxlSSL"},"source":["from sklearn.preprocessing import OneHotEncoder\n","\n","cat_encoder = OneHotEncoder()\n","housing_cat_1hot = cat_encoder.fit_transform(housing_cat)\n","housing_cat_1hot"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zO6XFM4CnYO2"},"source":["housing_cat_1hot.toarray()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FFy-tqo-napk"},"source":["cat_encoder = OneHotEncoder(sparse=False)\n","housing_cat_1hot = cat_encoder.fit_transform(housing_cat)\n","housing_cat_1hot"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Wg8WNER0ntE-"},"source":["cat_encoder.categories_"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4PzJ1zqCnxjL"},"source":["from sklearn.base import BaseEstimator, TransformerMixin\n","\n","# column index\n","# rooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6\n","col_names = \"total_rooms\", \"total_bedrooms\", \"population\", \"households\"\n","rooms_ix, bedrooms_ix, population_ix, households_ix = [\n","    housing.columns.get_loc(c) for c in col_names]\n","\n","class CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n","    def __init__(self, add_bedrooms_per_room=True): # none *args, **kargs \n","        self.add_bedrooms_per_room = add_bedrooms_per_room\n","    def fit(self, X, y=None):\n","        return self  # nothing to do\n","    def transform(self, X):\n","        rooms_per_household = X[:, rooms_ix] / X[:, households_ix]\n","        population_per_household = X[:, population_ix] / X[:, households_ix]\n","        if self.add_bedrooms_per_room:\n","            bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix]\n","            return np.c_[X, rooms_per_household, population_per_household,\n","                         bedrooms_per_room]\n","        else:\n","            return np.c_[X, rooms_per_household, population_per_household]\n","\n","attr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False)\n","housing_extra_attribs = attr_adder.transform(housing.to_numpy())\n","\n","# column naming\n","housing_extra_attribs = pd.DataFrame(housing_extra_attribs,\n","                                     columns=list(housing.columns)+[\"rooms_per_household\", \"population_per_household\"],\n","                                     index=housing.index)\n","housing_extra_attribs.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1tPji2yiqsWm"},"source":["from sklearn.pipeline import Pipeline\n","from sklearn.preprocessing import StandardScaler\n","\n","num_pipeline = Pipeline([\n","        ('imputer', SimpleImputer(strategy=\"median\")),\n","        ('attribs_adder', CombinedAttributesAdder()),\n","        ('std_scaler', StandardScaler()),\n","    ])\n","\n","housing_num_tr = num_pipeline.fit_transform(housing_num)\n","housing_num_tr"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VgG6UdlIq-hG"},"source":["from sklearn.compose import ColumnTransformer\n","\n","num_attribs = list(housing_num)\n","cat_attribs = [\"ocean_proximity\"]\n","\n","full_pipeline = ColumnTransformer([\n","        (\"num\", num_pipeline, num_attribs),\n","        (\"cat\", OneHotEncoder(), cat_attribs),\n","    ])\n","\n","housing_prepared = full_pipeline.fit_transform(housing)\n","housing_prepared"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gvxxW-S4rQFu"},"source":["housing_prepared.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SKKpk3XJrUa4"},"source":[""],"execution_count":null,"outputs":[]}]}